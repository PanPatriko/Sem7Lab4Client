//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab4Client.CovidReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Instance", Namespace="http://schemas.datacontract.org/2004/07/Lab4WcfService")]
    [System.SerializableAttribute()]
    public partial class Instance : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FirstSymptomsDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TestDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FirstSymptomsDate {
            get {
                return this.FirstSymptomsDateField;
            }
            set {
                if ((this.FirstSymptomsDateField.Equals(value) != true)) {
                    this.FirstSymptomsDateField = value;
                    this.RaisePropertyChanged("FirstSymptomsDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TestDate {
            get {
                return this.TestDateField;
            }
            set {
                if ((this.TestDateField.Equals(value) != true)) {
                    this.TestDateField = value;
                    this.RaisePropertyChanged("TestDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contact", Namespace="http://schemas.datacontract.org/2004/07/Lab4WcfService")]
    [System.SerializableAttribute()]
    public partial class Contact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ContactDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactWithField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ContactDate {
            get {
                return this.ContactDateField;
            }
            set {
                if ((this.ContactDateField.Equals(value) != true)) {
                    this.ContactDateField = value;
                    this.RaisePropertyChanged("ContactDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactWith {
            get {
                return this.ContactWithField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactWithField, value) != true)) {
                    this.ContactWithField = value;
                    this.RaisePropertyChanged("ContactWith");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CovidReference.ICovidService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ICovidService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICovidService/AddInstance", ReplyAction="http://tempuri.org/ICovidService/AddInstanceResponse")]
        void AddInstance(Lab4Client.CovidReference.Instance instance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICovidService/AddInstance", ReplyAction="http://tempuri.org/ICovidService/AddInstanceResponse")]
        System.Threading.Tasks.Task AddInstanceAsync(Lab4Client.CovidReference.Instance instance);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICovidService/GetInstance", ReplyAction="http://tempuri.org/ICovidService/GetInstanceResponse")]
        Lab4Client.CovidReference.Instance GetInstance();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICovidService/GetInstance", ReplyAction="http://tempuri.org/ICovidService/GetInstanceResponse")]
        System.Threading.Tasks.Task<Lab4Client.CovidReference.Instance> GetInstanceAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICovidService/AddContact", ReplyAction="http://tempuri.org/ICovidService/AddContactResponse")]
        void AddContact(Lab4Client.CovidReference.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICovidService/AddContact", ReplyAction="http://tempuri.org/ICovidService/AddContactResponse")]
        System.Threading.Tasks.Task AddContactAsync(Lab4Client.CovidReference.Contact contact);
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICovidService/GetContacts", ReplyAction="http://tempuri.org/ICovidService/GetContactsResponse")]
        Lab4Client.CovidReference.Contact[] GetContacts();
        
        [System.ServiceModel.OperationContractAttribute(IsInitiating=false, Action="http://tempuri.org/ICovidService/GetContacts", ReplyAction="http://tempuri.org/ICovidService/GetContactsResponse")]
        System.Threading.Tasks.Task<Lab4Client.CovidReference.Contact[]> GetContactsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ICovidService/FinishEnteringContacts", ReplyAction="http://tempuri.org/ICovidService/FinishEnteringContactsResponse")]
        Lab4Client.CovidReference.Contact[] FinishEnteringContacts();
        
        [System.ServiceModel.OperationContractAttribute(IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/ICovidService/FinishEnteringContacts", ReplyAction="http://tempuri.org/ICovidService/FinishEnteringContactsResponse")]
        System.Threading.Tasks.Task<Lab4Client.CovidReference.Contact[]> FinishEnteringContactsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICovidServiceChannel : Lab4Client.CovidReference.ICovidService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CovidServiceClient : System.ServiceModel.ClientBase<Lab4Client.CovidReference.ICovidService>, Lab4Client.CovidReference.ICovidService {
        
        public CovidServiceClient() {
        }
        
        public CovidServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CovidServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CovidServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CovidServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddInstance(Lab4Client.CovidReference.Instance instance) {
            base.Channel.AddInstance(instance);
        }
        
        public System.Threading.Tasks.Task AddInstanceAsync(Lab4Client.CovidReference.Instance instance) {
            return base.Channel.AddInstanceAsync(instance);
        }
        
        public Lab4Client.CovidReference.Instance GetInstance() {
            return base.Channel.GetInstance();
        }
        
        public System.Threading.Tasks.Task<Lab4Client.CovidReference.Instance> GetInstanceAsync() {
            return base.Channel.GetInstanceAsync();
        }
        
        public void AddContact(Lab4Client.CovidReference.Contact contact) {
            base.Channel.AddContact(contact);
        }
        
        public System.Threading.Tasks.Task AddContactAsync(Lab4Client.CovidReference.Contact contact) {
            return base.Channel.AddContactAsync(contact);
        }
        
        public Lab4Client.CovidReference.Contact[] GetContacts() {
            return base.Channel.GetContacts();
        }
        
        public System.Threading.Tasks.Task<Lab4Client.CovidReference.Contact[]> GetContactsAsync() {
            return base.Channel.GetContactsAsync();
        }
        
        public Lab4Client.CovidReference.Contact[] FinishEnteringContacts() {
            return base.Channel.FinishEnteringContacts();
        }
        
        public System.Threading.Tasks.Task<Lab4Client.CovidReference.Contact[]> FinishEnteringContactsAsync() {
            return base.Channel.FinishEnteringContactsAsync();
        }
    }
}
